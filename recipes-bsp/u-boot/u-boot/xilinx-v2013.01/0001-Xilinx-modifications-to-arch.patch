From f111a3294585ca536b2db2d19d1cbd6d1ec2b39a Mon Sep 17 00:00:00 2001
From: Sipke Vriend <sipke.vriend@xilinx.com>
Date: Tue, 21 May 2013 07:19:12 +1000
Subject: [PATCH 1/5] Xilinx modifications to arch

Signed-off-by: Sipke Vriend <sipke.vriend@xilinx.com>
---
 arch/arm/cpu/armv7/zynq/Makefile           |    1 +
 arch/arm/cpu/armv7/zynq/config.mk          |   25 +++
 arch/arm/cpu/armv7/zynq/cpu.c              |   28 +++-
 arch/arm/cpu/armv7/zynq/slcr.c             |  240 ++++++++++++++++++++++++
 arch/arm/include/asm/arch-zynq/hardware.h  |   96 ++++++++++
 arch/arm/include/asm/arch-zynq/mmc.h       |   37 ++++
 arch/arm/include/asm/arch-zynq/nand.h      |   25 +++
 arch/arm/include/asm/arch-zynq/sys_proto.h |   36 ++++
 arch/arm/lib/board.c                       |    2 +-
 arch/arm/lib/bootm.c                       |   15 +--
 arch/microblaze/include/asm/icap.h         |  279 ++++++++++++++++++++++++++++
 arch/microblaze/include/asm/processor.h    |    4 +
 arch/microblaze/lib/Makefile               |    1 +
 arch/microblaze/lib/board.c                |    3 +
 arch/microblaze/lib/bootm.c                |   63 +++++++
 arch/microblaze/lib/muldi3.c               |   91 +++++++++
 16 files changed, 930 insertions(+), 16 deletions(-)
 create mode 100644 arch/arm/cpu/armv7/zynq/config.mk
 create mode 100644 arch/arm/cpu/armv7/zynq/slcr.c
 create mode 100644 arch/arm/include/asm/arch-zynq/hardware.h
 create mode 100644 arch/arm/include/asm/arch-zynq/mmc.h
 create mode 100644 arch/arm/include/asm/arch-zynq/nand.h
 create mode 100644 arch/arm/include/asm/arch-zynq/sys_proto.h
 create mode 100644 arch/microblaze/include/asm/icap.h
 create mode 100644 arch/microblaze/lib/muldi3.c

diff --git a/arch/arm/cpu/armv7/zynq/Makefile b/arch/arm/cpu/armv7/zynq/Makefile
index 499ace4..388085d 100644
--- a/arch/arm/cpu/armv7/zynq/Makefile
+++ b/arch/arm/cpu/armv7/zynq/Makefile
@@ -30,6 +30,7 @@ LIB	= $(obj)lib$(SOC).o
 
 COBJS-y	:= timer.o
 COBJS-y	+= cpu.o
+COBJS-y	+= slcr.o
 
 COBJS	:= $(COBJS-y)
 
diff --git a/arch/arm/cpu/armv7/zynq/config.mk b/arch/arm/cpu/armv7/zynq/config.mk
new file mode 100644
index 0000000..85996f3
--- /dev/null
+++ b/arch/arm/cpu/armv7/zynq/config.mk
@@ -0,0 +1,25 @@
+#
+# (C) Copyright 2002
+# Gary Jennejohn, DENX Software Engineering, <gj@denx.de>
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+PLATFORM_RELFLAGS += -fno-strict-aliasing
+# Xilinx, added to prevent unaligned accesses which started happening # with GCC 4.5.2 tools
+PLATFORM_RELFLAGS += -mno-unaligned-access
diff --git a/arch/arm/cpu/armv7/zynq/cpu.c b/arch/arm/cpu/armv7/zynq/cpu.c
index ab615cc..e8f4c19 100644
--- a/arch/arm/cpu/armv7/zynq/cpu.c
+++ b/arch/arm/cpu/armv7/zynq/cpu.c
@@ -21,11 +21,37 @@
  * MA 02111-1307 USA
  */
 #include <common.h>
+#include <asm/io.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch/hardware.h>
 
-inline void lowlevel_init(void) {}
+void lowlevel_init(void)
+{
+	zynq_slcr_unlock();
+	/* remap DDR to zero, FILTERSTART */
+	writel(0, &scu_base->filter_start);
+
+	/* Device config APB, unlock the PCAP */
+	writel(0x757BDF0D, &devcfg_base->unlock);
+	writel(0xFFFFFFFF, &devcfg_base->rom_shadow);
+
+	/* OCM_CFG, Mask out the ROM, map ram into upper addresses */
+	writel(0x1F, &slcr_base->ocm_cfg);
+	/* FPGA_RST_CTRL, clear resets on AXI fabric ports */
+	writel(0x0, &slcr_base->fpga_rst_ctrl);
+	/* TZ_DDR_RAM, Set DDR trust zone non-secure */
+	writel(0xFFFFFFFF, &slcr_base->trust_zone);
+	/* Set urgent bits with register */
+	writel(0x0, &slcr_base->ddr_urgent_sel);
+	/* Urgent write, ports S2/S3 */
+	writel(0xC, &slcr_base->ddr_urgent);
+
+	zynq_slcr_lock();
+}
 
 void reset_cpu(ulong addr)
 {
+	zynq_slcr_cpu_reset();
 	while (1)
 		;
 }
diff --git a/arch/arm/cpu/armv7/zynq/slcr.c b/arch/arm/cpu/armv7/zynq/slcr.c
new file mode 100644
index 0000000..e5f710d
--- /dev/null
+++ b/arch/arm/cpu/armv7/zynq/slcr.c
@@ -0,0 +1,240 @@
+/*
+ * Copyright (c) 2013 Xilinx Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <asm/io.h>
+#include <malloc.h>
+#include <asm/arch/hardware.h>
+
+#define SLCR_LOCK_MAGIC		0x767B
+#define SLCR_UNLOCK_MAGIC	0xDF0D
+
+#define SLCR_QSPI_ENABLE		0x02
+#define SLCR_QSPI_ENABLE_MASK		0x03
+#define SLCR_NAND_L2_SEL		0x10
+#define SLCR_NAND_L2_SEL_MASK		0x1F
+
+#define SLCR_IDCODE_MASK	0x1F000
+#define SLCR_IDCODE_SHIFT	12
+
+/*
+ * zynq_slcr_mio_get_status - Get the status of MIO peripheral.
+ *
+ * @peri_name: Name of the peripheral for checking MIO status
+ * @get_pins: Pointer to array of get pin for this peripheral
+ * @num_pins: Number of pins for this peripheral
+ * @mask: Mask value
+ * @check_val: Required check value to get the status of  periph
+ */
+struct zynq_slcr_mio_get_status {
+	const char *peri_name;
+	const int *get_pins;
+	int num_pins;
+	u32 mask;
+	u32 check_val;
+};
+
+static const int qspi0_pins[] = {
+	1, 2, 3, 4, 5, 6
+};
+
+static const int qspi1_cs_pin[] = {
+	0
+};
+
+static const int qspi1_pins[] = {
+	9, 10, 11, 12, 13
+};
+
+static const int nand8_pins[] = {
+	0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
+};
+
+static const int nand16_pins[] = {
+	16, 17, 18, 19, 20, 21, 22, 23
+};
+
+static const struct zynq_slcr_mio_get_status mio_periphs[] = {
+	{
+		"qspi0",
+		qspi0_pins,
+		ARRAY_SIZE(qspi0_pins),
+		SLCR_QSPI_ENABLE_MASK,
+		SLCR_QSPI_ENABLE,
+	},
+	{
+		"qspi1_cs",
+		qspi1_cs_pin,
+		ARRAY_SIZE(qspi1_cs_pin),
+		SLCR_QSPI_ENABLE_MASK,
+		SLCR_QSPI_ENABLE,
+	},
+	{
+		"qspi1",
+		qspi1_pins,
+		ARRAY_SIZE(qspi1_pins),
+		SLCR_QSPI_ENABLE_MASK,
+		SLCR_QSPI_ENABLE,
+	},
+	{
+		"nand8",
+		nand8_pins,
+		ARRAY_SIZE(nand8_pins),
+		SLCR_NAND_L2_SEL_MASK,
+		SLCR_NAND_L2_SEL,
+	},
+	{
+		"nand16",
+		nand16_pins,
+		ARRAY_SIZE(nand16_pins),
+		SLCR_NAND_L2_SEL_MASK,
+		SLCR_NAND_L2_SEL,
+	},
+};
+
+static int slcr_lock = 1; /* 1 means locked, 0 means unlocked */
+
+void zynq_slcr_lock(void)
+{
+	if (!slcr_lock)
+		writel(SLCR_LOCK_MAGIC, &slcr_base->slcr_lock);
+}
+
+void zynq_slcr_unlock(void)
+{
+	if (slcr_lock)
+		writel(SLCR_UNLOCK_MAGIC, &slcr_base->slcr_unlock);
+}
+
+/* Reset the entire system */
+void zynq_slcr_cpu_reset(void)
+{
+	/*
+	 * Unlock the SLCR then reset the system.
+	 * Note that this seems to require raw i/o
+	 * functions or there's a lockup?
+	 */
+	zynq_slcr_unlock();
+
+	/*
+	 * Clear 0x0F000000 bits of reboot status register to workaround
+	 * the FSBL not loading the bitstream after soft-reboot
+	 * This is a temporary solution until we know more.
+	 */
+	clrbits_le32(&slcr_base->reboot_status, 0xF000000);
+
+	writel(1, &slcr_base->pss_rst_ctrl);
+}
+
+/* Setup clk for network */
+void zynq_slcr_gem_clk_setup(u32 gem_id, u32 rclk, u32 clk)
+{
+	zynq_slcr_unlock();
+
+	if (gem_id > 1) {
+		printf("Non existing GEM id %d\n", gem_id);
+		goto out;
+	}
+
+	if (gem_id) {
+		/* Set divisors for appropriate frequency in GEM_CLK_CTRL */
+		writel(clk, &slcr_base->gem1_clk_ctrl);
+		/* Configure GEM_RCLK_CTRL */
+		writel(rclk, &slcr_base->gem1_rclk_ctrl);
+	} else {
+		/* Set divisors for appropriate frequency in GEM_CLK_CTRL */
+		writel(clk, &slcr_base->gem0_clk_ctrl);
+		/* Configure GEM_RCLK_CTRL */
+		writel(rclk, &slcr_base->gem0_rclk_ctrl);
+	}
+
+out:
+	zynq_slcr_lock();
+}
+
+void zynq_slcr_devcfg_disable(void)
+{
+	zynq_slcr_unlock();
+
+	/* Disable AXI interface */
+	writel(0xFFFFFFFF, &slcr_base->fpga_rst_ctrl);
+
+	/* Set Level Shifters DT618760 */
+	writel(0xA, &slcr_base->lvl_shftr_en);
+
+	zynq_slcr_lock();
+}
+
+void zynq_slcr_devcfg_enable(void)
+{
+	zynq_slcr_unlock();
+
+	/* Set Level Shifters DT618760 */
+	writel(0xF, &slcr_base->lvl_shftr_en);
+
+	/* Disable AXI interface */
+	writel(0x0, &slcr_base->fpga_rst_ctrl);
+
+	zynq_slcr_lock();
+}
+
+u32 zynq_slcr_get_boot_mode(void)
+{
+	/* Get the bootmode register value */
+	return readl(&slcr_base->boot_mode);
+}
+
+u32 zynq_slcr_get_idcode(void)
+{
+	return (readl(&slcr_base->pss_idcode) & SLCR_IDCODE_MASK) >>
+							SLCR_IDCODE_SHIFT;
+}
+
+/*
+ * zynq_slcr_get_mio_pin_status - Get the MIO pin status of peripheral.
+ *
+ * @periph: Name of the peripheral
+ *
+ * Returns count to indicate the number of pins configured for the
+ * given @periph.
+ */
+int zynq_slcr_get_mio_pin_status(const char *periph)
+{
+	const struct zynq_slcr_mio_get_status *mio_ptr;
+	int val, i, j;
+	int mio = 0;
+
+	for (i = 0; i < ARRAY_SIZE(mio_periphs); i++) {
+		if (strcmp(periph, mio_periphs[i].peri_name) == 0) {
+			mio_ptr = &mio_periphs[i];
+			for (j = 0; j < mio_ptr->num_pins; j++) {
+				val = readl(&slcr_base->mio_pin
+						[mio_ptr->get_pins[j]]);
+				if ((val & mio_ptr->mask) == mio_ptr->check_val)
+					mio++;
+			}
+			break;
+		}
+	}
+
+	return mio;
+}
diff --git a/arch/arm/include/asm/arch-zynq/hardware.h b/arch/arm/include/asm/arch-zynq/hardware.h
new file mode 100644
index 0000000..3fd980a
--- /dev/null
+++ b/arch/arm/include/asm/arch-zynq/hardware.h
@@ -0,0 +1,96 @@
+/*
+ * Copyright (c) 2013 Xilinx Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef _ASM_ARCH_HARDWARE_H
+#define _ASM_ARCH_HARDWARE_H
+
+#define XPSS_SYS_CTRL_BASEADDR		0xF8000000
+#define XPSS_DEV_CFG_APB_BASEADDR	0xF8007000
+#define XPSS_SCU_BASEADDR		0xF8F00000
+
+/* Reflect slcr offsets */
+struct slcr_regs {
+	u32 scl; /* 0x0 */
+	u32 slcr_lock; /* 0x4 */
+	u32 slcr_unlock; /* 0x8 */
+	u32 reserved0[75];
+	u32 gem0_rclk_ctrl; /* 0x138 */
+	u32 gem1_rclk_ctrl; /* 0x13c */
+	u32 gem0_clk_ctrl; /* 0x140 */
+	u32 gem1_clk_ctrl; /* 0x144 */
+	u32 reserved1[46];
+	u32 pss_rst_ctrl; /* 0x200 */
+	u32 reserved2[15];
+	u32 fpga_rst_ctrl; /* 0x240 */
+	u32 reserved3[5];
+	u32 reboot_status; /* 0x258 */
+	u32 boot_mode; /* 0x25c */
+	u32 reserved4[116];
+	u32 trust_zone; /* 0x430 */ /* FIXME */
+	u32 reserved5_1[63];
+	u32 pss_idcode; /* 0x530 */
+	u32 reserved5_2[51];
+	u32 ddr_urgent; /* 0x600 */
+	u32 reserved6[6];
+	u32 ddr_urgent_sel; /* 0x61c */
+	u32 reserved7[56];
+	u32 mio_pin[54]; /* 0x700 - 0x7D4 */
+	u32 reserved8[74];
+	u32 lvl_shftr_en; /* 0x900 */
+	u32 reserved9[3];
+	u32 ocm_cfg; /* 0x910 */
+};
+
+#define slcr_base ((struct slcr_regs *) XPSS_SYS_CTRL_BASEADDR)
+
+struct devcfg_regs {
+	u32 ctrl; /* 0x0 */
+	u32 lock; /* 0x4 */
+	u32 cfg; /* 0x8 */
+	u32 int_sts; /* 0xc */
+	u32 int_mask; /* 0x10 */
+	u32 status; /* 0x14 */
+	u32 dma_src_addr; /* 0x18 */
+	u32 dma_dst_addr; /* 0x1c */
+	u32 dma_src_len; /* 0x20 */
+	u32 dma_dst_len; /* 0x24 */
+	u32 rom_shadow; /* 0x28 */
+	u32 reserved1[2];
+	u32 unlock; /* 0x34 */
+	u32 reserved2[18];
+	u32 mctrl; /* 0x80 */
+	u32 reserved3;
+	u32 write_count; /* 0x88 */
+	u32 read_count; /* 0x8c */
+};
+
+#define devcfg_base ((struct devcfg_regs *) XPSS_DEV_CFG_APB_BASEADDR)
+
+struct scu_regs {
+	u32 reserved1[16];
+	u32 filter_start; /* 0x40 */
+	u32 filter_end; /* 0x44 */
+};
+
+#define scu_base ((struct scu_regs *) XPSS_SCU_BASEADDR)
+
+#endif /* _ASM_ARCH_HARDWARE_H */
diff --git a/arch/arm/include/asm/arch-zynq/mmc.h b/arch/arm/include/asm/arch-zynq/mmc.h
new file mode 100644
index 0000000..18dd036
--- /dev/null
+++ b/arch/arm/include/asm/arch-zynq/mmc.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright 2012 Joe Hershberger <joe.hershberger@ni.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __ASM_ARCH_MMC_H_
+#define __ASM_ARCH_MMC_H_
+
+#include <config.h>
+
+int zynq_sdhci_init(u32 regbase, u32 max_clk, u32 min_clk);
+
+static inline int zynq_mmc_init(bd_t *bd)
+{
+	u32 regbase = (u32) SD_BASEADDR;
+
+	return zynq_sdhci_init(regbase, 52000000, 52000000 >> 9);
+}
+
+#endif /* __ASM_ARCH_MMC_H_ */
diff --git a/arch/arm/include/asm/arch-zynq/nand.h b/arch/arm/include/asm/arch-zynq/nand.h
new file mode 100644
index 0000000..33a7d20
--- /dev/null
+++ b/arch/arm/include/asm/arch-zynq/nand.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright 2012 Joe Hershberger <joe.hershberger@ni.com>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <nand.h>
+
+extern int zynq_nand_init(struct nand_chip *nand_chip);
diff --git a/arch/arm/include/asm/arch-zynq/sys_proto.h b/arch/arm/include/asm/arch-zynq/sys_proto.h
new file mode 100644
index 0000000..411589e
--- /dev/null
+++ b/arch/arm/include/asm/arch-zynq/sys_proto.h
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2013 Xilinx Inc.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef _SYS_PROTO_H_
+#define _SYS_PROTO_H_
+
+extern void zynq_slcr_lock(void);
+extern void zynq_slcr_unlock(void);
+extern void zynq_slcr_cpu_reset(void);
+extern void zynq_slcr_gem_clk_setup(u32 gem_id, u32 rclk, u32 clk);
+extern void zynq_slcr_devcfg_disable(void);
+extern void zynq_slcr_devcfg_enable(void);
+extern u32 zynq_slcr_get_boot_mode(void);
+extern u32 zynq_slcr_get_idcode(void);
+extern int zynq_slcr_get_mio_pin_status(const char *periph);
+
+#endif /* _SYS_PROTO_H_ */
diff --git a/arch/arm/lib/board.c b/arch/arm/lib/board.c
index 9f861cc..cfe32cc 100644
--- a/arch/arm/lib/board.c
+++ b/arch/arm/lib/board.c
@@ -488,7 +488,7 @@ static char *failed = "*** failed ***\n";
 static int should_load_env(void)
 {
 #ifdef CONFIG_OF_CONTROL
-	return fdtdec_get_config_int(gd->fdt_blob, "load-environment", 1);
+	return fdtdec_get_config_int(gd->fdt_blob, "load-environment", 0);
 #elif defined CONFIG_DELAY_ENVIRONMENT
 	return 0;
 #else
diff --git a/arch/arm/lib/bootm.c b/arch/arm/lib/bootm.c
index 1bd2730..28420e3 100644
--- a/arch/arm/lib/bootm.c
+++ b/arch/arm/lib/bootm.c
@@ -79,17 +79,7 @@ void arch_lmb_reserve(struct lmb *lmb)
 #ifdef CONFIG_OF_LIBFDT
 static int fixup_memory_node(void *blob)
 {
-	bd_t	*bd = gd->bd;
-	int bank;
-	u64 start[CONFIG_NR_DRAM_BANKS];
-	u64 size[CONFIG_NR_DRAM_BANKS];
-
-	for (bank = 0; bank < CONFIG_NR_DRAM_BANKS; bank++) {
-		start[bank] = bd->bi_dram[bank].start;
-		size[bank] = bd->bi_dram[bank].size;
-	}
-
-	return fdt_fixup_memory_banks(blob, start, size, CONFIG_NR_DRAM_BANKS);
+	return 0;
 }
 #endif
 
@@ -315,9 +305,6 @@ static void boot_prep_linux(bootm_headers_t *images)
 #endif
 		setup_board_tags(&params);
 		setup_end_tag(gd->bd);
-#else /* all tags */
-		printf("FDT and ATAGS support not compiled in - hanging\n");
-		hang();
 #endif /* all tags */
 	}
 }
diff --git a/arch/microblaze/include/asm/icap.h b/arch/microblaze/include/asm/icap.h
new file mode 100644
index 0000000..8d4fe79
--- /dev/null
+++ b/arch/microblaze/include/asm/icap.h
@@ -0,0 +1,279 @@
+#include <asm/io.h>
+
+#define XHwIcap_In32 readl
+
+#define XHwIcap_Out32(a,b) writel(b,a) /* switch address & data */
+
+/* Packet Types */
+#define XHI_SYNC_PACKET			0xAA995566
+#define XHI_DUMMY_PACKET		0xFFFFFFFF
+#define XHI_DEVICE_ID_READ		0x28018001
+#define XHI_NOOP_PACKET			0x20000000
+
+/* Command types */
+#define XHI_TYPE_1			1
+
+/* Command Direction */
+#define XHI_OP_READ			1
+
+/* Register Programming Offsets */
+#define XHI_TYPE_SHIFT			29
+#define XHI_REGISTER_SHIFT		13
+#define XHI_OP_SHIFT			27
+
+/* Register Offsets */
+#define XHI_WBSTAR			16
+
+/* Register offsets for the XHwIcap device. */
+#define XHI_GIER_OFFSET		0x1C  /**< Device Global Interrupt Enable Reg */
+#define XHI_IPISR_OFFSET	0x20  /**< Interrupt Status Register */
+#define XHI_IPIER_OFFSET	0x28  /**< Interrupt Enable Register */
+#define XHI_WF_OFFSET		0x100 /**< Write FIFO */
+#define XHI_RF_OFFSET		0x104 /**< Read FIFO */
+#define XHI_SZ_OFFSET		0x108 /**< Size Register */
+#define XHI_CR_OFFSET		0x10C /**< Control Register */
+#define XHI_SR_OFFSET		0x110 /**< Status Register */
+#define XHI_WFV_OFFSET		0x114 /**< Write FIFO Vacancy Register */
+#define XHI_RFO_OFFSET		0x118 /**< Read FIFO Occupancy Register */
+
+/* Control Register Contents */
+#define XHI_CR_READ_MASK	0x00000002 /**< Read from ICAP to FIFO */
+#define XHI_CR_WRITE_MASK	0x00000001 /**< Write from FIFO to ICAP */
+
+/* Status Register Contents */
+#define XHI_SR_DONE_MASK	0x00000001 /**< Done bit Mask  */
+
+/* Number of times to poll the Status Register */
+#define XHI_MAX_RETRIES			1000
+
+/* Program Command */
+#define XHI_CMD_IPROG			15
+
+
+/****************************************************************************/
+/**
+*
+* Read from the specified HwIcap device register.
+*
+* @param	BaseAddress contains the base address of the device.
+* @param	RegOffset contains the offset from the 1st register of the
+*		device to select the specific register.
+*
+* @return	The value read from the register.
+*
+* @note		C-Style signature:
+*		u32 XHwIcap_ReadReg(u32 BaseAddress, u32 RegOffset);
+*
+******************************************************************************/
+#define XHwIcap_ReadReg(BaseAddress, RegOffset) \
+	XHwIcap_In32((BaseAddress) + (RegOffset))
+
+/***************************************************************************/
+/**
+*
+* Write to the specified HwIcap device register.
+*
+* @param	BaseAddress contains the base address of the device.
+* @param	RegOffset contains the offset from the 1st register of the
+*		device to select the specific register.
+* @param	RegisterValue is the value to be written to the register.
+*
+* @return	None.
+*
+* @note		C-Style signature:
+*		void XHwIcap_WriteReg(u32 BaseAddress, u32 RegOffset,
+*					u32 RegisterValue);
+******************************************************************************/
+#define XHwIcap_WriteReg(BaseAddress, RegOffset, RegisterValue) \
+	XHwIcap_Out32((BaseAddress) + (RegOffset), (RegisterValue))
+
+/****************************************************************************/
+/**
+*
+* Write data to the Write FIFO.
+*
+* @param	BaseAddress contains the base address of the device.
+* @param	Data is the 32-bit value to be written to the FIFO.
+*
+* @return	None.
+*
+* @note		C-style Signature:
+* 		void XHwIcap_FifoWrite(u32 BaseAddress, u32 Data);
+*
+*****************************************************************************/
+#define XHwIcap_FifoWrite(BaseAddress,Data) 				\
+	(XHwIcap_WriteReg(BaseAddress,  XHI_WF_OFFSET, (Data)))
+
+/****************************************************************************/
+/**
+*
+* Read data from the Read FIFO.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	The 32-bit Data read from the FIFO.
+*
+* @note		C-style Signature:
+* 		u32 XHwIcap_FifoRead(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_FifoRead(BaseAddress) 					\
+(XHwIcap_ReadReg(BaseAddress, XHI_RF_OFFSET))
+
+/****************************************************************************/
+/**
+*
+* Get the contents of the Control register.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	A 32-bit value representing the contents of the Control
+*		register.
+*
+* @note		u32 XHwIcap_GetControlReg(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_GetControlReg(BaseAddress) \
+ (XHwIcap_ReadReg(BaseAddress, XHI_CR_OFFSET))
+
+
+/****************************************************************************/
+/**
+*
+* Set the Control Register to initiate a configuration (write) to the device.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	None.
+*
+* @note		C-style Signature:
+*		void XHwIcap_StartConfig(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_StartConfig(BaseAddress) \
+ (XHwIcap_WriteReg(BaseAddress, XHI_CR_OFFSET, (XHwIcap_GetControlReg(BaseAddress) & \
+ 	(~ XHI_CR_READ_MASK)) | XHI_CR_WRITE_MASK))
+
+/******************************************************************************/
+/**
+*
+* This macro returns the vacancy of the Write FIFO. This indicates the
+* number of words that can be written to the Write FIFO before it becomes
+* full.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	The contents read from the Write FIFO Vacancy Register.
+*
+* @note		C-Style signature:
+*		u32 XHwIcap_GetWrFifoVacancy(u32 BaseAddress)
+*
+******************************************************************************/
+#define XHwIcap_GetWrFifoVacancy(BaseAddress)				\
+ XHwIcap_ReadReg(BaseAddress, XHI_WFV_OFFSET)
+
+/******************************************************************************/
+/**
+*
+* This macro returns the occupancy  of the Read FIFO.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	The contents read from the Read FIFO Occupancy Register.
+*
+* @note		C-Style signature:
+*		u32 XHwIcap_GetRdFifoOccupancy(u32 BaseAddress)
+*
+******************************************************************************/
+#define XHwIcap_GetRdFifoOccupancy(BaseAddress)		\
+ XHwIcap_ReadReg(BaseAddress, XHI_RFO_OFFSET)
+
+/****************************************************************************/
+/**
+*
+* Get the contents of the status register.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	A 32-bit value representing the contents of the status register.
+*
+* @note		u32 XHwIcap_GetStatusReg(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_GetStatusReg(BaseAddress) \
+(XHwIcap_ReadReg(BaseAddress, XHI_SR_OFFSET))
+
+/****************************************************************************/
+/**
+*
+* This macro checks if the last Read/Write to the ICAP device in the FPGA
+* is completed.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return
+*		- 1 if the last Read/Write(Config) to the ICAP is NOT
+*		completed.
+*		- 0 if the Read/Write(Config) to the ICAP is completed..
+*
+* @note		C-Style signature:
+*		int XHwIcap_IsDeviceBusy(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_IsDeviceBusy(BaseAddress)			\
+	((XHwIcap_GetStatusReg(BaseAddress) & XHI_SR_DONE_MASK) ? 0 : 1)
+
+/****************************************************************************/
+/**
+*
+* Set the number of words to be read from the Icap in the Size register.
+*
+* The Size Register holds the number of 32 bit words to transfer from the
+* the Icap to the Read FIFO of the HwIcap device.
+*
+* @param	BaseAddress contains the base address of the device.
+* @param	Data is the size in words.
+*
+* @return	None.
+*
+* @note		C-style Signature:
+*		void XHwIcap_SetSizeReg(u32 BaseAddress, u32 Data);
+*
+*****************************************************************************/
+#define XHwIcap_SetSizeReg(BaseAddress, Data) \
+	(XHwIcap_WriteReg(BaseAddress, XHI_SZ_OFFSET, (Data)))
+    
+/****************************************************************************/
+/**
+*
+* Set the Control Register to initiate a ReadBack from the device.
+*
+* @param	BaseAddress contains the base address of the device.
+*
+* @return	None.
+*
+* @note		C-style Signature:
+*		void XHwIcap_StartReadBack(u32 BaseAddress);
+*
+*****************************************************************************/
+#define XHwIcap_StartReadBack(BaseAddress) \
+ (XHwIcap_WriteReg(BaseAddress, XHI_CR_OFFSET, (XHwIcap_GetControlReg(BaseAddress) & \
+ 	(~ XHI_CR_WRITE_MASK)) | XHI_CR_READ_MASK))
+    
+/****************************************************************************/
+/**
+*
+* Generates a Type 1 packet header that reads back the requested Configuration
+* register.
+*
+* @param	Register is the address of the register to be read back.
+*
+* @return	Type 1 packet header to read the specified register
+*
+* @note		None.
+*
+*****************************************************************************/
+#define XHwIcap_Type1Read(Register) \
+	( (XHI_TYPE_1 << XHI_TYPE_SHIFT) | (Register << XHI_REGISTER_SHIFT) | \
+	(XHI_OP_READ << XHI_OP_SHIFT) )
+
diff --git a/arch/microblaze/include/asm/processor.h b/arch/microblaze/include/asm/processor.h
index 2c4d5ff..9d19dda 100644
--- a/arch/microblaze/include/asm/processor.h
+++ b/arch/microblaze/include/asm/processor.h
@@ -31,4 +31,8 @@ extern char __text_start[];
 /* Microblaze board initialization function */
 void board_init(void);
 
+/* Watchdog functions */
+int hw_watchdog_init(void);
+void hw_watchdog_disable(void);
+
 #endif /* __ASM_MICROBLAZE_PROCESSOR_H */
diff --git a/arch/microblaze/lib/Makefile b/arch/microblaze/lib/Makefile
index 7730695..8d7febd 100644
--- a/arch/microblaze/lib/Makefile
+++ b/arch/microblaze/lib/Makefile
@@ -29,6 +29,7 @@ SOBJS-y	+=
 
 COBJS-y	+= board.o
 COBJS-y	+= bootm.o
+COBJS-y	+= muldi3.o
 
 SRCS	:= $(SOBJS-y:.o=.S) $(COBJS-y:.o=.c)
 OBJS	:= $(addprefix $(obj),$(SOBJS-y) $(COBJS-y))
diff --git a/arch/microblaze/lib/board.c b/arch/microblaze/lib/board.c
index a7c2f76..815fb5a 100644
--- a/arch/microblaze/lib/board.c
+++ b/arch/microblaze/lib/board.c
@@ -61,6 +61,9 @@ init_fnc_t *init_sequence[] = {
 	serial_init,
 	console_init_f,
 	interrupts_init,
+#ifdef CONFIG_XILINX_TB_WATCHDOG
+	hw_watchdog_init,
+#endif
 	timer_init,
 	NULL,
 };
diff --git a/arch/microblaze/lib/bootm.c b/arch/microblaze/lib/bootm.c
index 66d21f4..7da683d 100644
--- a/arch/microblaze/lib/bootm.c
+++ b/arch/microblaze/lib/bootm.c
@@ -30,6 +30,10 @@
 #include <u-boot/zlib.h>
 #include <asm/byteorder.h>
 
+#if defined(CONFIG_CMD_BOOTB)
+#include <asm/icap.h>
+#endif
+
 DECLARE_GLOBAL_DATA_PTR;
 
 int do_bootm_linux(int flag, int argc, char * const argv[], bootm_headers_t *images)
@@ -83,3 +87,62 @@ int do_bootm_linux(int flag, int argc, char * const argv[], bootm_headers_t *ima
 
 	return 1;
 }
+
+#if defined(CONFIG_CMD_BOOTB)
+int do_bootb_kintex7(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
+{
+	u32 FrameBuffer[8];
+    u32 BootAddress = simple_strtoul(argv[1], NULL, 16);
+	u32 Index = 0;
+    u32 Count;
+    
+    if (argc < 2)
+		return -1;
+    
+    if ((BootAddress <  CONFIG_SYS_FLASH_BASE) || (BootAddress > (CONFIG_SYS_FLASH_BASE + CONFIG_SYS_FLASH_SIZE)))
+    {
+        return -1;
+    }
+
+    /*
+	 * Create the data to be written to the ICAP.
+	 */
+	FrameBuffer[Index++] = XHI_DUMMY_PACKET;
+	FrameBuffer[Index++] = XHI_SYNC_PACKET;
+	FrameBuffer[Index++] = XHI_NOOP_PACKET;
+    FrameBuffer[Index++] = 0x30020001;                        /* Type 1 write to WBSTAR */
+    FrameBuffer[Index++] = BootAddress;
+    FrameBuffer[Index++] = 0x30008001;                        /* Type 1 Write to CMD */
+    FrameBuffer[Index++] = XHI_CMD_IPROG;
+	FrameBuffer[Index++] = XHI_NOOP_PACKET;
+
+     /*
+	  * Fill the FIFO with as many words as it will take (or as many as we have to send).
+	  */
+	while(Index > XHwIcap_GetWrFifoVacancy(HWICAP_BASEADDR));
+	for (Count = 0; Count < Index; Count++)
+    {
+    	XHwIcap_FifoWrite(HWICAP_BASEADDR, FrameBuffer[Count]);
+	}
+
+    /*
+	 * Start the transfer of the data from the FIFO to the ICAP device.
+	 */
+	XHwIcap_StartConfig(HWICAP_BASEADDR);
+
+	while ((XHwIcap_ReadReg(HWICAP_BASEADDR,XHI_CR_OFFSET)) & XHI_CR_WRITE_MASK);
+    
+	while (XHwIcap_IsDeviceBusy(HWICAP_BASEADDR) != 0);
+	while (XHwIcap_ReadReg(HWICAP_BASEADDR, XHI_CR_OFFSET) & XHI_CR_WRITE_MASK);
+    
+    /* The code should never get here sice the FPGA should reset */
+    return -1;
+}
+
+U_BOOT_CMD(
+	bootb, 2, 1,	do_bootb_kintex7,
+	"reprogram the fpga with a new image",
+	"<address> - Program the FPGA with the data starting at the given address"
+);
+
+#endif
diff --git a/arch/microblaze/lib/muldi3.c b/arch/microblaze/lib/muldi3.c
new file mode 100644
index 0000000..76d7590
--- /dev/null
+++ b/arch/microblaze/lib/muldi3.c
@@ -0,0 +1,91 @@
+/*
+ * U-boot - muldi3.c contains routines for mult and div
+ *
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
+ * MA 02110-1301 USA
+ */
+
+/* Generic function got from GNU gcc package, libgcc2.c */
+#ifndef SI_TYPE_SIZE
+#define SI_TYPE_SIZE 32
+#endif
+#define __ll_B (1L << (SI_TYPE_SIZE / 2))
+#define __ll_lowpart(t) ((USItype) (t) % __ll_B)
+#define __ll_highpart(t) ((USItype) (t) / __ll_B)
+#define BITS_PER_UNIT 8
+
+#if !defined(umul_ppmm)
+#define umul_ppmm(w1, w0, u, v)						\
+	do {								\
+	USItype __x0, __x1, __x2, __x3;					\
+	USItype __ul, __vl, __uh, __vh;					\
+									\
+		__ul = __ll_lowpart(u);					\
+		__uh = __ll_highpart(u);				\
+		__vl = __ll_lowpart(v);					\
+		__vh = __ll_highpart(v);				\
+									\
+	__x0 = (USItype) __ul * __vl;					\
+	__x1 = (USItype) __ul * __vh;					\
+	__x2 = (USItype) __uh * __vl;					\
+	__x3 = (USItype) __uh * __vh;					\
+									\
+		__x1 += __ll_highpart(__x0); /* this can't give carry */\
+		__x1 += __x2; /* but this indeed can */			\
+		if (__x1 < __x2) /* did we get it? */			\
+		__x3 += __ll_B;	/* yes, add it in the proper pos. */	\
+									\
+		(w1) = __x3 + __ll_highpart(__x1);			\
+		(w0) = __ll_lowpart(__x1) * __ll_B + __ll_lowpart(__x0);\
+	} while (0)
+#endif
+
+#if !defined(__umulsidi3)
+#define __umulsidi3(u, v)						\
+	({DIunion __w;							\
+	umul_ppmm(__w.s.high, __w.s.low, u, v);		\
+	__w.ll; })
+#endif
+
+typedef unsigned int USItype __attribute__ ((mode(SI)));
+typedef int SItype __attribute__ ((mode(SI)));
+typedef int DItype __attribute__ ((mode(DI)));
+typedef int word_type __attribute__ ((mode(__word__)));
+
+struct DIstruct {
+	SItype low, high;
+};
+typedef union {
+	struct DIstruct s;
+	DItype ll;
+} DIunion;
+
+DItype __muldi3(DItype u, DItype v)
+{
+	DIunion w;
+	DIunion uu, vv;
+
+	uu.ll = u, vv.ll = v;
+	/*  panic("kernel panic for __muldi3"); */
+	w.ll = __umulsidi3(uu.s.low, vv.s.low);
+	w.s.high += ((USItype) uu.s.low * (USItype) vv.s.high
+		     + (USItype) uu.s.high * (USItype) vv.s.low);
+
+	return w.ll;
+}
-- 
1.7.5.4

